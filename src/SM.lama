-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInstruction(c, i) {
  case c of
    [s, st, w] -> 
      case i of
        READ      -> 
        case readWorld(w) of
          [z, w] -> [z:s, st, w]
        esac
      | WRITE     ->
        case s of
          z:s -> [s, st, writeWorld(z, w)]
        esac
      | BINOP (op) -> 
        case s of
          y:x:s -> [evalOp(op, x, y):s, st, w]
        esac
      | LD    (name) -> [st(name):s, st, w]
      | ST    (name) -> 
        case s of
          z:s -> [s, st <- [name, z], w]
        esac
      | CONST (z) -> [z:s, st, w]
    esac
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | i:insns -> eval(evalInstruction(c, i), insns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> {LD (name)}
  | Const (value) -> {CONST (value)}
  | Binop (op, leftExpr, rightExpr) -> compileExpr (leftExpr) +++ compileExpr (rightExpr) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn   (name, expr)   -> compileExpr(expr) +++ {ST (name)}
  | Seq    (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip                  -> {}
  | Read   (name)         -> {READ, ST (name)}
  | Write  (expr)         -> compileExpr(expr) +++ {WRITE}
  esac
}
